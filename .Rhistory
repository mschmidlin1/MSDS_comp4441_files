1+1
1 + 1
1+1
a=1+1
b<- 3+4
source("C:/Users/mschm/Desktop/Learning R/First_Script.r")
mynumeric = 1.2
mycharacter = "hell world"
mylogical = TRUE
mycharacter = "hell0 world"
mycharacter = "hello world"
mylogical = TRUE
myfactor = as.factor("some categorical thing")
myvector = c(1,2,3,4,10.7,45)
othervector = c(T,F,T,T,T,T,T)
charactervector = c("q","j","d")
factorvector = as.factor(c('d','w','g'))
# vectors cannot really have mixed data types. If mixed data types are put in, R will transform them all to the same types.
mylist = list(1, "2", FALSE)
# Lists CAN have mixed data types
df = data.frame(c(1,2,3,4,5,6), c("a","b","c","d","e"))
# Lists CAN have mixed data types
df = data.frame(c(1,2,3,4,5,6), c("a","b","c","d","e","f"))
View(df)
#dataframes have to contain the same length of each column
mymatrix = matrix(c(1,0,1),c(0,1,0),c(1,0,1))
#dataframes have to contain the same length of each column
mymatrix = matrix(c(1,0,1),1,3))
#dataframes have to contain the same length of each column
mymatrix = matrix(c(1,0,1),1,3)
#dataframes have to contain the same length of each column
mymatrix = matrix(c(1,0,1,0,1,0,1,0,1),3,3)
View(mymatrix)
myvector[3]
myvector[0]
myvector[1]
namedlist = list("one"=1,
"two"=2,
"three"=3)
names(namedlist)
namedlist["one"]
names(df)
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
?plot  # Help for plot()
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
cc0000
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
# Clear packages
detach("package:datasets", unload = TRUE)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)
?iris
head(iris)
typeof(iris)
typeof(iris[0])
iris[0]
for (val in iris[0])
{
print(val)
}
for (val in iris)
{
print(val)
}
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# HISTOGRAM BY GROUP #######################################
?table
# HISTOGRAM BY GROUP #######################################
?par
library(knitr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(HistData)
data("PolioTrials")
dat<-PolioTrials
#str(dat)
kable(dat)
n<-10000
ct<-sum(dat$Paralytic[1:2])
prop<-dat$Population[1]/sum(dat$Population[1:2])
set.seed(45678765)
sim3<-rbinom(n,ct,prop)
qplot(sim3)
mean(sim3<=dat$Paralytic[1])
```{r}
factorial(6)
x*y
x<--1
y<-pi
x*y
z<-"This is fun"
x<--1
y<-pi
x*y
z<-"This is fun"
setwd("C:\Users\mschm\Desktop\Masters_DU\Comp_4441")
setwd(r"C:\Users\mschm\Desktop\Masters_DU\Comp_4441")
setwd("C:\\Users\\mschm\\Desktop\\Masters_DU\\Comp_4441")
getwd()
setwd("C:/Users/mschm/Desktop/Masters_DU/Comp_4441")
mat<-matrix(c(1,2,3,4,5,678),ncol=2)
View(mat)
getwd()
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
hello<-"Hello, World!"
hello
print(hello)
first<-1
First<-2
first
First
second
second = 3
second
y<-TRUE # logical or boolean value of TRUE
str(y)
Y<-"TRUE" # character value of "TRUE"
str(Y)
Y<-77
# The function "str" gives the structure of the argument.
# Each line of comments needs a "#" at the front.
str(Y)
second = FALSE
second
str(second)
x<-5
y<-10
x+y
add.em<-x+y
add.em
add.copy<-add.em
add.copy<-10*add.copy
add.copy
add.em
x
x<-x+1
x
z = 5
z = z^3
z
fib.vec<-c(0,1,1,2,3,5,8)
str(fib.vec)
fib.vec
5*fib.vec
fib.vec+fib.vec
fib.vec^2
var.names<-c("age","income","gender")
var.names
str(var.names)
myvec = c(0, 0.5, 1, 2.3)
4^myvec
set.seed(6789098)
sample(fib.vec,3)
sample(fib.vec,3)
set.seed(6789098)
sample(fib.vec,3) # Note this is the same sample as the first one above.
if(x<10){
x<-11
y<-7
}
if(x<10){
x<-11
y<-7
} else if(x<80) {
x<-9080
} else {
y<-44
}
z = 'hi'
w = 'there'
t = 'ans'
if(z>w){
t = 'hi greater than there'
} else{
t = 'hi is less than there'
}
t```
t
counter<-0
for ( i in 1:length(fib.vec)){
print(fib.vec[i])
counter<-counter+1
}
for ( i in fib.vec){
print(i)
counter<-counter+1
}
for ( i in fib.vec){
i
counter<-counter+1
}
for (variable in fib.vec) {
print(variable*7)
}
while (fib.vec[i]<5){
print(fib.vec[i])
i<-i+1
}
i<-1
while (fib.vec[i]<5){
print(fib.vec[i])
i<-i+1
}
i<-7
while (fib.vec[i]>2){
print(fib.vec[i])
i<-i-1
}
set.seed(56776)
sample(1:10,1)
1:10
x = 1:10
str(x)
y = c(1,2,3,4,5)
y
str(y)
